openapi: 3.0.0
info:
  title: Tasks API
  version: 1.0.0
paths:
  /tasks:
    get:
      summary: Get all tasks
      tags: [tasks]
      responses:
        '200':
          description: Tasks list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a task
      tags: [tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /tasks/{id}:
    patch:
      summary: Update a task
      tags: [tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                what_is_the_task:
                  type: string
                is_done:
                  type: boolean
                user_id:
                  type: integer
                  format: uint
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      summary: Delete a task
      tags: [tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint64
      responses:
        '204':
          description: Task deleted successfully

  /users:
    get:
      summary: Get all users
      tags: [users]
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create user
      tags: [users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    patch:
      summary: Update user info
      tags: [users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user
      tags: [users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '204':
          description: User deleted successfully
  /users/{id}/tasks:
    get:
      summary: Get all user's tasks
      operationId: GetTasksByUserID
      tags: [users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: User's tasks list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'




components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: uint
        user_id:
          type: integer
          format: uint
        what_is_the_task:
          type: string
        is_done:
          type: boolean
      required:
        - what_is_the_task
        - user_id

    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password